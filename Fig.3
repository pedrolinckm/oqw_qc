#Histogram of the paper (Fig. 3)

import numpy as np
import matplotlib.pyplot as plt
import matplotlib.pyplot as plt
import matplotlib.font_manager as fm
font_path = '/home/pedro-linck/Downloads/times.ttf'  # Update this path if necessary
font_prop = fm.FontProperties(fname=font_path)

plt.rcParams['font.family'] = 'serif'
# Parameters
omega = 2/3  
N = 20    
num_samples = 1000  # Number of random samples to generate
lambd = 1 - omega
a = omega / (1 - omega)

# Generate array of 'j' values
j_values = np.arange(N)

a_powers = a ** j_values
p_j_numerator = a_powers * (a - 1)
p_j_denominator = a ** N - 1
p_j = p_j_numerator / p_j_denominator

p_j /= p_j.sum()

# Create the histogram
plt.figure(figsize=(8, 6))

# Initialize P array
P = np.zeros((N, num_samples+1))

# Set initial condition
P[0, 0] = 1

# Compute P[m, n] recursively
for n in range(1, num_samples+1):
    for m in range(N):
        if m == 0:
            P[m, n] = lambd * (P[m, n-1] + P[m+1, n-1])
        elif m == N - 1:
            P[m, n] = omega * (P[m, n-1] + P[m-1, n-1])
        else:
            P[m, n] = omega * P[m-1, n-1] + lambd * P[m+1, n-1]


simulated_prob = np.zeros(N)
for m in range(1,N):
    simulated_prob[m] = P[m,num_samples]

bins = np.arange(0, N)
plt.bar(bins, simulated_prob, edgecolor='black', alpha=0.7, label='Simulation')

plt.plot(j_values, p_j,'ro-', label='Theoretical Probability')

plt.xlabel('j', fontproperties=font_prop)
plt.ylabel('Probability')
plt.xticks(j_values)
plt.legend()
plt.grid(True)

plt.savefig('histogram.pgf')
plt.savefig('histogram.png')
